// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/phogolabs/log/handler/console"
)

type Syslogger struct {
	AlertStub        func(m string) error
	alertMutex       sync.RWMutex
	alertArgsForCall []struct {
		m string
	}
	alertReturns struct {
		result1 error
	}
	alertReturnsOnCall map[int]struct {
		result1 error
	}
	CritStub        func(m string) error
	critMutex       sync.RWMutex
	critArgsForCall []struct {
		m string
	}
	critReturns struct {
		result1 error
	}
	critReturnsOnCall map[int]struct {
		result1 error
	}
	DebugStub        func(m string) error
	debugMutex       sync.RWMutex
	debugArgsForCall []struct {
		m string
	}
	debugReturns struct {
		result1 error
	}
	debugReturnsOnCall map[int]struct {
		result1 error
	}
	EmergStub        func(m string) error
	emergMutex       sync.RWMutex
	emergArgsForCall []struct {
		m string
	}
	emergReturns struct {
		result1 error
	}
	emergReturnsOnCall map[int]struct {
		result1 error
	}
	ErrStub        func(m string) error
	errMutex       sync.RWMutex
	errArgsForCall []struct {
		m string
	}
	errReturns struct {
		result1 error
	}
	errReturnsOnCall map[int]struct {
		result1 error
	}
	InfoStub        func(m string) error
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		m string
	}
	infoReturns struct {
		result1 error
	}
	infoReturnsOnCall map[int]struct {
		result1 error
	}
	NoticeStub        func(m string) error
	noticeMutex       sync.RWMutex
	noticeArgsForCall []struct {
		m string
	}
	noticeReturns struct {
		result1 error
	}
	noticeReturnsOnCall map[int]struct {
		result1 error
	}
	WarningStub        func(m string) error
	warningMutex       sync.RWMutex
	warningArgsForCall []struct {
		m string
	}
	warningReturns struct {
		result1 error
	}
	warningReturnsOnCall map[int]struct {
		result1 error
	}
	WriteStub        func(p []byte) (n int, err error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		p []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Syslogger) Alert(m string) error {
	fake.alertMutex.Lock()
	ret, specificReturn := fake.alertReturnsOnCall[len(fake.alertArgsForCall)]
	fake.alertArgsForCall = append(fake.alertArgsForCall, struct {
		m string
	}{m})
	fake.recordInvocation("Alert", []interface{}{m})
	fake.alertMutex.Unlock()
	if fake.AlertStub != nil {
		return fake.AlertStub(m)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.alertReturns.result1
}

func (fake *Syslogger) AlertCallCount() int {
	fake.alertMutex.RLock()
	defer fake.alertMutex.RUnlock()
	return len(fake.alertArgsForCall)
}

func (fake *Syslogger) AlertArgsForCall(i int) string {
	fake.alertMutex.RLock()
	defer fake.alertMutex.RUnlock()
	return fake.alertArgsForCall[i].m
}

func (fake *Syslogger) AlertReturns(result1 error) {
	fake.AlertStub = nil
	fake.alertReturns = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) AlertReturnsOnCall(i int, result1 error) {
	fake.AlertStub = nil
	if fake.alertReturnsOnCall == nil {
		fake.alertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.alertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) Crit(m string) error {
	fake.critMutex.Lock()
	ret, specificReturn := fake.critReturnsOnCall[len(fake.critArgsForCall)]
	fake.critArgsForCall = append(fake.critArgsForCall, struct {
		m string
	}{m})
	fake.recordInvocation("Crit", []interface{}{m})
	fake.critMutex.Unlock()
	if fake.CritStub != nil {
		return fake.CritStub(m)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.critReturns.result1
}

func (fake *Syslogger) CritCallCount() int {
	fake.critMutex.RLock()
	defer fake.critMutex.RUnlock()
	return len(fake.critArgsForCall)
}

func (fake *Syslogger) CritArgsForCall(i int) string {
	fake.critMutex.RLock()
	defer fake.critMutex.RUnlock()
	return fake.critArgsForCall[i].m
}

func (fake *Syslogger) CritReturns(result1 error) {
	fake.CritStub = nil
	fake.critReturns = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) CritReturnsOnCall(i int, result1 error) {
	fake.CritStub = nil
	if fake.critReturnsOnCall == nil {
		fake.critReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.critReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) Debug(m string) error {
	fake.debugMutex.Lock()
	ret, specificReturn := fake.debugReturnsOnCall[len(fake.debugArgsForCall)]
	fake.debugArgsForCall = append(fake.debugArgsForCall, struct {
		m string
	}{m})
	fake.recordInvocation("Debug", []interface{}{m})
	fake.debugMutex.Unlock()
	if fake.DebugStub != nil {
		return fake.DebugStub(m)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.debugReturns.result1
}

func (fake *Syslogger) DebugCallCount() int {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return len(fake.debugArgsForCall)
}

func (fake *Syslogger) DebugArgsForCall(i int) string {
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	return fake.debugArgsForCall[i].m
}

func (fake *Syslogger) DebugReturns(result1 error) {
	fake.DebugStub = nil
	fake.debugReturns = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) DebugReturnsOnCall(i int, result1 error) {
	fake.DebugStub = nil
	if fake.debugReturnsOnCall == nil {
		fake.debugReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.debugReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) Emerg(m string) error {
	fake.emergMutex.Lock()
	ret, specificReturn := fake.emergReturnsOnCall[len(fake.emergArgsForCall)]
	fake.emergArgsForCall = append(fake.emergArgsForCall, struct {
		m string
	}{m})
	fake.recordInvocation("Emerg", []interface{}{m})
	fake.emergMutex.Unlock()
	if fake.EmergStub != nil {
		return fake.EmergStub(m)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.emergReturns.result1
}

func (fake *Syslogger) EmergCallCount() int {
	fake.emergMutex.RLock()
	defer fake.emergMutex.RUnlock()
	return len(fake.emergArgsForCall)
}

func (fake *Syslogger) EmergArgsForCall(i int) string {
	fake.emergMutex.RLock()
	defer fake.emergMutex.RUnlock()
	return fake.emergArgsForCall[i].m
}

func (fake *Syslogger) EmergReturns(result1 error) {
	fake.EmergStub = nil
	fake.emergReturns = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) EmergReturnsOnCall(i int, result1 error) {
	fake.EmergStub = nil
	if fake.emergReturnsOnCall == nil {
		fake.emergReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.emergReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) Err(m string) error {
	fake.errMutex.Lock()
	ret, specificReturn := fake.errReturnsOnCall[len(fake.errArgsForCall)]
	fake.errArgsForCall = append(fake.errArgsForCall, struct {
		m string
	}{m})
	fake.recordInvocation("Err", []interface{}{m})
	fake.errMutex.Unlock()
	if fake.ErrStub != nil {
		return fake.ErrStub(m)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.errReturns.result1
}

func (fake *Syslogger) ErrCallCount() int {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return len(fake.errArgsForCall)
}

func (fake *Syslogger) ErrArgsForCall(i int) string {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return fake.errArgsForCall[i].m
}

func (fake *Syslogger) ErrReturns(result1 error) {
	fake.ErrStub = nil
	fake.errReturns = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) ErrReturnsOnCall(i int, result1 error) {
	fake.ErrStub = nil
	if fake.errReturnsOnCall == nil {
		fake.errReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.errReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) Info(m string) error {
	fake.infoMutex.Lock()
	ret, specificReturn := fake.infoReturnsOnCall[len(fake.infoArgsForCall)]
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		m string
	}{m})
	fake.recordInvocation("Info", []interface{}{m})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		return fake.InfoStub(m)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.infoReturns.result1
}

func (fake *Syslogger) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *Syslogger) InfoArgsForCall(i int) string {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].m
}

func (fake *Syslogger) InfoReturns(result1 error) {
	fake.InfoStub = nil
	fake.infoReturns = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) InfoReturnsOnCall(i int, result1 error) {
	fake.InfoStub = nil
	if fake.infoReturnsOnCall == nil {
		fake.infoReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.infoReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) Notice(m string) error {
	fake.noticeMutex.Lock()
	ret, specificReturn := fake.noticeReturnsOnCall[len(fake.noticeArgsForCall)]
	fake.noticeArgsForCall = append(fake.noticeArgsForCall, struct {
		m string
	}{m})
	fake.recordInvocation("Notice", []interface{}{m})
	fake.noticeMutex.Unlock()
	if fake.NoticeStub != nil {
		return fake.NoticeStub(m)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.noticeReturns.result1
}

func (fake *Syslogger) NoticeCallCount() int {
	fake.noticeMutex.RLock()
	defer fake.noticeMutex.RUnlock()
	return len(fake.noticeArgsForCall)
}

func (fake *Syslogger) NoticeArgsForCall(i int) string {
	fake.noticeMutex.RLock()
	defer fake.noticeMutex.RUnlock()
	return fake.noticeArgsForCall[i].m
}

func (fake *Syslogger) NoticeReturns(result1 error) {
	fake.NoticeStub = nil
	fake.noticeReturns = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) NoticeReturnsOnCall(i int, result1 error) {
	fake.NoticeStub = nil
	if fake.noticeReturnsOnCall == nil {
		fake.noticeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.noticeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) Warning(m string) error {
	fake.warningMutex.Lock()
	ret, specificReturn := fake.warningReturnsOnCall[len(fake.warningArgsForCall)]
	fake.warningArgsForCall = append(fake.warningArgsForCall, struct {
		m string
	}{m})
	fake.recordInvocation("Warning", []interface{}{m})
	fake.warningMutex.Unlock()
	if fake.WarningStub != nil {
		return fake.WarningStub(m)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.warningReturns.result1
}

func (fake *Syslogger) WarningCallCount() int {
	fake.warningMutex.RLock()
	defer fake.warningMutex.RUnlock()
	return len(fake.warningArgsForCall)
}

func (fake *Syslogger) WarningArgsForCall(i int) string {
	fake.warningMutex.RLock()
	defer fake.warningMutex.RUnlock()
	return fake.warningArgsForCall[i].m
}

func (fake *Syslogger) WarningReturns(result1 error) {
	fake.WarningStub = nil
	fake.warningReturns = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) WarningReturnsOnCall(i int, result1 error) {
	fake.WarningStub = nil
	if fake.warningReturnsOnCall == nil {
		fake.warningReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.warningReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Syslogger) Write(p []byte) (n int, err error) {
	var pCopy []byte
	if p != nil {
		pCopy = make([]byte, len(p))
		copy(pCopy, p)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		p []byte
	}{pCopy})
	fake.recordInvocation("Write", []interface{}{pCopy})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(p)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.writeReturns.result1, fake.writeReturns.result2
}

func (fake *Syslogger) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *Syslogger) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].p
}

func (fake *Syslogger) WriteReturns(result1 int, result2 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *Syslogger) WriteReturnsOnCall(i int, result1 int, result2 error) {
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *Syslogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.alertMutex.RLock()
	defer fake.alertMutex.RUnlock()
	fake.critMutex.RLock()
	defer fake.critMutex.RUnlock()
	fake.debugMutex.RLock()
	defer fake.debugMutex.RUnlock()
	fake.emergMutex.RLock()
	defer fake.emergMutex.RUnlock()
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.noticeMutex.RLock()
	defer fake.noticeMutex.RUnlock()
	fake.warningMutex.RLock()
	defer fake.warningMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Syslogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ console.Syslogger = new(Syslogger)
